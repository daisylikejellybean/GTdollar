package gtdollar.com.test.controller;

import java.sql.Timestamp;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import gtdollar.com.test.Transaction;
import gtdollar.com.test.User;
import gtdollar.com.test.contract.AddUserRequest;
import gtdollar.com.test.contract.AddUserResponse;
import gtdollar.com.test.contract.CheckBalanceRequest;
import gtdollar.com.test.contract.CheckBalanceResponse;
import gtdollar.com.test.contract.TransactionRequest;
import gtdollar.com.test.contract.TransactionResponse;
import gtdollar.com.test.repo.TransactionRepository;
import gtdollar.com.test.repo.UserRepository;

@RestController
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private TransactionRepository transactionRepository;

	@PostMapping(path = "/regist", consumes = "application/json", produces = "application/json") //
	public AddUserResponse addNewUser(@RequestBody AddUserRequest addUserRequest) {
		AddUserResponse addUserResponse = new AddUserResponse();

		// Validate Reuqest
		if (addUserRequest == null || addUserRequest.getEmail() == null) {
			addUserResponse.setSucess(false);
			addUserResponse.setErrorMessage("Invalid Request!");
			return addUserResponse;
		}
		// Query User from DB
		User user = userRepository.findUserByEmail(addUserRequest.getEmail());
		if (user == null) {
			// If User not found, then create a new User
			user = new User();
			user.setBalance(10000);
			user.setUserEmail(addUserRequest.getEmail());
			userRepository.save(user);

			addUserResponse.setSucess(true);
			addUserResponse.setBalance(10000.0);

		} else {
			// User already registered.
			addUserResponse.setSucess(false);
			addUserResponse.setErrorMessage("User Already Exist!");
		}
		return addUserResponse;
	}

	@PostMapping(path = "/check", consumes = "application/json", produces = "application/json") //
	public CheckBalanceResponse checkBalance(@RequestBody CheckBalanceRequest checkBalanceRequest) {
		CheckBalanceResponse checkBalanceResponse = new CheckBalanceResponse();

		// Validate Reuqest
		if (checkBalanceRequest == null || checkBalanceRequest.getEmail() == null) {
			checkBalanceResponse.setSucess(false);
			checkBalanceResponse.setErrorMessage("Invalid Request!");
			return checkBalanceResponse;
		}

		// Query User from DB
		User user = userRepository.findUserByEmail(checkBalanceRequest.getEmail());
		if (user == null) {
			// If User not found, return error message
			checkBalanceResponse.setSucess(false);
			checkBalanceResponse.setErrorMessage("User does not exist");
		} else {
			// return the balance and status of this query
			checkBalanceResponse.setSucess(true);
			checkBalanceResponse.setBalance(user);
		}
		return checkBalanceResponse;
	}

	@PostMapping(path = "/transfer", consumes = "application/json", produces = "application/json") //
	public TransactionResponse transfer(@RequestBody TransactionRequest transactionRequest) {
		TransactionResponse transactionResponse = new TransactionResponse();

		// Validate Request
		if (transactionRequest == null || transactionRequest.getEmail() == null
				|| transactionRequest.getTransferee() == null || transactionRequest.getAmount() < 0) {
			transactionResponse.setSuccess(false);
			transactionResponse.setErrorMessage("Invalid Request!");
			return transactionResponse;
		}

		// Query User from DB
		User sender = userRepository.findUserByEmail(transactionRequest.getEmail());
		User receiver = userRepository.findUserByEmail(transactionRequest.getTransferee());

		if (sender == null) {
			// If sender not found, return error message
			transactionResponse.setErrorMessage("Sender does not exist");
			transactionResponse.setSuccess(false);
		} else if (receiver == null) {
			// If sender not found, return error message
			transactionResponse.setErrorMessage("Receiver does not exist");
			transactionResponse.setSuccess(false);

		} else if (transactionRequest.getAmount() > sender.getBalance()) {
			// If sender not found, return error message
			transactionResponse.setErrorMessage("Transaction amount greater than sender's balance");
			transactionResponse.setSuccess(false);

		} else {
			// return the balance and status of this query
			transactionResponse.setSuccess(true);

			// update sender and user's balance
			sender.setBalance(sender.getBalance() - transactionRequest.getAmount());
			receiver.setBalance(receiver.getBalance() + transactionRequest.getAmount());

			// create transaction repository
			Transaction transaction = new Transaction();
			transaction.setSender(sender.getUserEmail());
			transaction.setReceiver(receiver.getUserEmail());
			transaction.setAmount(transactionRequest.getAmount());
			Date date = new Date();
			transaction.setTransactionDate((new Timestamp(date.getTime())));
			transactionRepository.save(transaction);
			userRepository.save(sender);
			userRepository.save(receiver);
		}
		return transactionResponse;
	}

}